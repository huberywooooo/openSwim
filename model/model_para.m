function para = model_para()
    % model_para: Load model parameters based on seismic wave type and input file.
    % 
    % para = model_para(wavemode, filename) reads the model parameters from the 
    % file specified by 'filename' and calculates various parameters based on the 
    % seismic wave mode 'wavemode'. The valid wave modes are 'pwave' (for P-wave) 
    % and 'svwave' (for SV-wave). Depending on the selected wave mode, different 
    % reflection coefficients are calculated.
    %
    % Inputs:
    %   wavemode - A string specifying the type of seismic wave ('pwave' or 'svwave').
    %   filename - The name of the file containing the model parameters to load.
    %
    % Outputs:
    %   para     - A structure containing the loaded model parameters and the calculated
    %              seismic parameters, including wave velocities, reflection coefficients,
    %              and material properties.
    %
    %   OpenSwim: An Open Source Library for Seismic Wave Input and simulation Methods
    %   Author(s): Hubery H.B. Woo (hbw8456@163.com)
    %   Copyright 2009-2024 Chongqing Three Gorges University

    
    global wavemode alpha; %#ok

    % Load the model parameters from the 'para.txt' file
    para = load_para();

    % Define Global Parameters
    para.alpha = alpha;  % Angle of seismic wave incidence
    % para.size_x = 100;           % Model x dimension
    % para.size_y = 100;           % Model y dimension
    % para.dtime = 0.02;           % Time step
    % para.elastic = 1e8;          % Elastic modulus
    % para.nu = 0.35;              % Poisson's ratio
    % para.rho = 2000;             % Rock material density
    para.lambda = para.elastic * para.nu / ((1 + para.nu) * (1 - 2 * para.nu));
    para.shear = para.elastic / (2 * (1 + para.nu));
    para.cp = sqrt((para.lambda + 2 * para.shear) / para.rho);   % P-wave velocity
    para.cs = sqrt(para.shear / para.rho);                       % S-wave velocity
    para.beta = asin(para.cs * sin(para.alpha) / para.cp);       % Reflection angle of SV wave

    % Reflection coefficients for P and SV wave amplitudes
    switch lower(wavemode)
        case 'pwave'
        para.A1 = (para.cs^2 * sin(2 * para.alpha) * sin(2 * para.beta) - para.cp^2 * cos(2 * para.beta)^2) / ...
                   (para.cs^2 * sin(2 * para.alpha) * sin(2 * para.beta) + para.cp^2 * cos(2 * para.beta)^2);
        para.A2 = (2 * para.cp * para.cs * sin(2 * para.alpha) * cos(2 * para.beta)) / ...
                   (para.cs^2 * sin(2 * para.alpha) * sin(2 * para.beta) + para.cp^2 * cos(2 * para.beta)^2);
        case 'svwave'
        para.A1 = (para.cs^2 * sin(2 * para.alpha) * sin(2 * para.beta) - para.cp^2 * cos(2 * para.alpha)^2) / ...
                   (para.cs^2 * sin(2 * para.alpha) * sin(2 * para.beta) + para.cp^2 * cos(2 * para.alpha)^2);
        para.A2 = (2 * para.cp * para.cs * sin(2 * para.alpha) * cos(2 * para.alpha)) / ...
                   (para.cs^2 * sin(2 * para.alpha) * sin(2 * para.beta) + para.cp^2 * cos(2 * para.alpha)^2);
        otherwise
            error('Invalid wavemode. wavemode must be P wave or SV wave.');
    end

    % Parameters for two springs and damping
    % para.A = 0.8;
    % para.B = 1.1;
    para.k_n1 = (para.lambda + 2 * para.shear) / (1 + para.A);
    para.c_n = para.B * para.rho * para.cp;
    para.k_t1 = (para.shear) / (1 + para.A);
    para.c_t = para.B * para.rho * para.cs;

    % write a message to the file
    write_log('model_para has been executed.');

end % function model_para


function para = load_para(inputFile,workingDir)
    % load_para: Load model parameters from a specified input file.
    %
    % SYNTAX:
    %   para = load_para(inputFile, workingDir)
    %
    % INPUTS:
    %   inputFile - A string representing the path to the input file 
    %               containing the model parameters.
    %   workingDir - A string representing the working directory where 
    %                the input file is located or where outputs should be saved.
    %
    % OUTPUTS:
    %   para - A structure containing the loaded model parameters.

    if nargin <1 || isempty(inputFile)
        inputFile = 'para.dat';
    end
    
    if nargin <2 || isempty(workingDir)
        workingDir = fullfile(pwd, 'temp');
    end

    % Read the parameters from the para.txt file generated by ANSYS
    fileID = fopen(fullfile(workingDir, inputFile), 'r');

    % Check if the file was successfully opened
    if fileID == -1
        ansys_error();
        write_log('ansys_error has been not found.');
        return;
    end

    % Read each line and extract parameters
    while ~feof(fileID)
        line = fgetl(fileID);
        if contains(line, 'xb')
            para.size_x = sscanf(line, 'xb=%f');
        elseif contains(line, 'yb')
            para.size_y = sscanf(line, 'yb=%f');
        elseif contains(line, 'dtime')
            para.dtime = sscanf(line, 'dtime=%f');
        elseif contains(line, 'elastic')
            para.elastic = sscanf(line, 'elastic=%f');
        elseif contains(line, 'rho')
            para.rho = sscanf(line, 'rho=%f');
        elseif contains(line, 'nu')
            para.nu = sscanf(line, 'nu=%f');
        elseif contains(line, 'A')
            para.A = sscanf(line, 'A=%f');
        elseif contains(line, 'B')
            para.B = sscanf(line, 'B=%f');
        end
    end
    fclose(fileID);

end % function load_para